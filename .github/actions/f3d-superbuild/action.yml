name: 'F3D Superbuild'
description: 'Build and package F3D'
inputs:
  f3d_version:
    description: 'F3D version to build'
    required: true
    default: 'origin/master'
  raytracing_label:
    description: 'A label to enable raytracing'
    required: false
    default: 'raytracing'
  egl_label:
    description: 'A label to enable egl rendering'
    required: false
    default: 'no-egl'

runs:
  using: "composite"
  steps:

  - name: Install tools Windows
    if: runner.os == 'Windows'
    shell: cmd
    run: |
      choco install ninja
      choco install sccache

  - name: Install tools MacOS
    if: runner.os == 'macOS'
    shell: bash
    run: brew install sccache

  - name: Initialize sccache environnement
    shell: bash
    run: |
      echo SCCACHE_CACHE=$(sccache --show-stats | grep Local | cut -d '"' -f2) >> $GITHUB_ENV
      echo DATE_STRING=$(date +'%Y%m%d') >> $GITHUB_ENV
      sccache --stop-server

  - name: Recover sccache cache
    uses: actions/cache@v3
    with:
      path: ${{env.SCCACHE_CACHE}}
      key: sccache-cache-${{inputs.raytracing_label}}-${{runner.os}}-0-${{env.DATE_STRING}}
      restore-keys: sccache-cache-${{inputs.raytracing_label}}-${{runner.os}}-0

  - name: Start sccache
    shell: bash
    working-directory: ${{github.workspace}}
    run: sccache --start-server

  - name: Setup msvc Windows
    if: runner.os == 'Windows'
    uses: TheMrMilchmann/setup-msvc-dev@v2
    with:
      arch: x64

  - name: Setup NSIS Windows
    if: runner.os == 'Windows'
    working-directory: ${{github.workspace}}
    shell: powershell
    run: cp source\.github\nsis\FileAssociation.nsh "${env:ProgramFiles(x86)}/NSIS/Include"

  - name: Setup Directories
    working-directory: ${{github.workspace}}
    shell: bash
    run: mkdir build

  - name: Recover VTK version to build
    working-directory: ${{github.workspace}}
    shell: bash
    run: |
      curl -L --output vtk_commit_sha https://raw.githubusercontent.com/f3d-app/f3d/master/.github/actions/vtk_commit_sha
      echo VTK_COMMIT_SHA=`cat ./vtk_commit_sha` >> $GITHUB_ENV

  # OCCT coloring is disabled on macOS because of f3d-app/f3d#792
  - name: Configure
    working-directory: ${{github.workspace}}/build
    shell: bash
    run: >
      cmake ../source
      -DBUILD_SHARED_LIBS_alembic=OFF
      -DBUILD_SHARED_LIBS_assimp=OFF
      -DBUILD_SHARED_LIBS_draco=OFF
      -DBUILD_SHARED_LIBS_openexr=OFF
      -DBUILD_SHARED_LIBS_imath=OFF
      -DBUILD_SHARED_LIBS_occt=OFF
      -DBUILD_SHARED_LIBS_openusd=ON
      -DBUILD_SHARED_LIBS_vtk=OFF
      -DCMAKE_BUILD_TYPE=Release
      -DCMAKE_CXX_COMPILER_LAUNCHER=sccache
      -DCMAKE_C_COMPILER_LAUNCHER=sccache
      -DENABLE_egl=${{ inputs.egl_label == 'egl' && 'ON' || 'OFF' }}
      -DENABLE_ospray=${{ inputs.raytracing_label == 'raytracing' && 'ON' || 'OFF' }}
      -DENABLE_exodus=${{ contains(env.CMAKE_OSX_ARCHITECTURES, 'arm64') && 'OFF' || 'ON' }}
      -DOCCT_ENABLE_COLORING=${{ runner.os == 'macOS' && 'OFF' || 'ON' }}
      -DUSE_SYSTEM_python3=ON
      -Df3d_GIT_TAG=${{ inputs.f3d_version }}
      -Df3d_SOURCE_SELECTION=git
      -Dospray_SOURCE_SELECTION=2.7.1
      -Dvtk_GIT_TAG=${{ env.VTK_COMMIT_SHA }}
      -Dvtk_SOURCE_SELECTION=git
      ${{ runner.os == 'Windows' && '-G Ninja' || null }}
      ${{ runner.os == 'macOS' && '-DCMAKE_OSX_DEPLOYMENT_TARGET=10.15' || null }}

  - name: Build
    working-directory: ${{github.workspace}}/build
    shell: bash
    run: cmake --build . --parallel 2 --config Release

  - name: Package
    working-directory: ${{github.workspace}}/build
    shell: bash
    run: |
      cmake ./
      ctest -R cpack -VV
      ctest -R extract -VV

  - name: Clean install
    working-directory: ${{github.workspace}}/build
    shell: bash
    run: cmake -E remove_directory install

  - name: Run Xvfb Linux
    if: |
      runner.os == 'Linux' &&
      inputs.egl_label != 'egl'
    shell: bash
    run: Xvfb $DISPLAY -screen 0 1280x1024x24 &

  - name: Install Mesa Windows
    shell: cmd
    if: runner.os == 'Windows'
    working-directory: ${{github.workspace}}
    run: |
      mkdir build\Testing\test-sdk\
      mkdir build\Testing\test-sdk\TestRendering_build\
      mkdir mesa
      cd mesa
      curl.exe -L --output mesa.7z --url https://github.com/pal1000/mesa-dist-win/releases/download/22.0.1/mesa3d-22.0.1-release-msvc.7z
      "C:\Program Files\7-Zip\7z.exe" x mesa.7z
      cp x64\opengl32.dll ..\build\Testing\test-extraction\bin\
      cp x64\libglapi.dll ..\build\Testing\test-extraction\bin\
      cp x64\libgallium_wgl.dll ..\build\Testing\test-extraction\bin\
      cp x64\opengl32.dll ..\build\Testing\test-sdk\TestRendering_build\
      cp x64\libglapi.dll ..\build\Testing\test-sdk\TestRendering_build\
      cp x64\libgallium_wgl.dll ..\build\Testing\test-sdk\TestRendering_build\

  - name: Test package
    if: |
      inputs.egl_label != 'egl' &&
      !contains(env.CMAKE_OSX_ARCHITECTURES, 'arm64')
    working-directory: ${{github.workspace}}/build
    shell: bash
    run: |
      ctest -R sdk -VV
      ctest -R exec -VV

  # Ubuntu 18.04 provided libEGL.so has rendering issues
  # So not all tests can be run
  - name: Test package EGL
    if: inputs.egl_label == 'egl'
    working-directory: ${{github.workspace}}/build
    shell: bash
    run: |
      ctest -R sdk -VV
      ctest -R f3d-exec-exists$ -VV
      ctest -R f3d-exec-TestSimple$ -VV
      ctest -R f3d-exec-TestThumbnail$ -VV
      ctest -R f3d-exec-TestAlembic$ -VV
      ctest -R f3d-exec-TestAssimp$ -VV
      ctest -R f3d-exec-TestDraco$ -VV
      ctest -R f3d-exec-TestOCCT$ -VV
      ctest -R f3d-exec-TestUSD$ -VV

  - name: Upload Tests Artifact
    if: failure()
    uses: actions/upload-artifact@v3
    with:
      path: ./build/Testing/Temporary
      name: f3d-superbuild-tests-artifact-${{runner.os}}-${{inputs.raytracing_label}}-${{inputs.egl_label}}

  - name: Cleanup sccache
    working-directory: ${{github.workspace}}
    shell: bash
    run: sccache --stop-server

  - name: Upload Artifacts
    if: always()
    uses: actions/upload-artifact@v3
    with:
      path: ./build/F3D-*
      name: F3D-${{runner.os}}-${{inputs.raytracing_label}}-${{inputs.egl_label == 'egl' && 'headless' || 'desktop'}}-${{ runner.os == 'macOS' && env.CMAKE_OSX_ARCHITECTURES || 'x86_64' }}
