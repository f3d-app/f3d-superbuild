name: 'F3D Superbuild'
description: 'Build and package F3D'
inputs:
  f3d_version:
    description: 'F3D version to build'
    required: true
    default: 'origin/master'
  raytracing_label:
    description: 'A label to enable raytracing'
    required: false
    default: 'raytracing'
  cpu:
    description: 'CPU architecture to build for'
    required: false
    default: 'x86_64'
  lfs_sha:
    description: 'Cache LFS sha'
    required: false

runs:
  using: "composite"
  steps:

  - name: Recover LFS Data
    uses: f3d-app/lfs-data-cache-action@v1
    with:
      type: 'consumer'
      lfs_sha: ${{inputs.lfs_sha}}
      cache_postfix: cache-0

  - name: Install ninja Windows
    if: runner.os == 'Windows'
    shell: cmd
    run: choco install ninja

  - name: Install and setup sccache
    uses: f3d-app/sccache-setup-action@v1
    with:
      key: ${{inputs.raytracing_label}}-${{runner.os}}-${{inputs.cpu}}-0

  - name: Setup msvc Windows
    if: runner.os == 'Windows'
    uses: TheMrMilchmann/setup-msvc-dev@v3
    with:
      arch: x64

  - name: Setup NSIS Windows
    if: runner.os == 'Windows'
    working-directory: ${{github.workspace}}
    shell: powershell
    run: cp source\.github\nsis\FileAssociation.nsh "${env:ProgramFiles(x86)}/NSIS/Include"

  - name: Setup Directories
    working-directory: ${{github.workspace}}
    shell: bash
    run: mkdir build

  - name: Recover VTK version to build
    working-directory: ${{github.workspace}}
    shell: bash
    run: |
      curl -L --output vtk_commit_sha https://raw.githubusercontent.com/f3d-app/f3d/master/.github/actions/vtk_commit_sha
      echo VTK_COMMIT_SHA=`cat ./vtk_commit_sha` >> $GITHUB_ENV

  # OCCT coloring is disabled on macOS because of f3d-app/f3d#792
  - name: Configure
    working-directory: ${{github.workspace}}/build
    shell: bash
    run: >
      cmake ../source
      -DBUILD_SHARED_LIBS_alembic=OFF
      -DBUILD_SHARED_LIBS_assimp=OFF
      -DBUILD_SHARED_LIBS_draco=OFF
      -DBUILD_SHARED_LIBS_openexr=OFF
      -DBUILD_SHARED_LIBS_imath=OFF
      -DBUILD_SHARED_LIBS_occt=OFF
      -DBUILD_SHARED_LIBS_openusd=ON
      -DBUILD_SHARED_LIBS_openvdb=OFF
      -DBUILD_SHARED_LIBS_vtk=OFF
      -DCMAKE_BUILD_TYPE=Release
      -DCMAKE_CXX_COMPILER_LAUNCHER=sccache
      -DCMAKE_C_COMPILER_LAUNCHER=sccache
      -DENABLE_ospray=${{ inputs.raytracing_label == 'raytracing' && 'ON' || 'OFF' }}
      -DUSE_SYSTEM_python3=ON
      -Df3d_GIT_TAG=${{ inputs.f3d_version }}
      -Df3d_SOURCE_SELECTION=git
      -Dospray_SOURCE_SELECTION=2.7.1
      -Dvtk_GIT_TAG=${{ env.VTK_COMMIT_SHA }}
      -Dvtk_SOURCE_SELECTION=git
      ${{ runner.os == 'Linux' && '-DENABLE_egl=ON -DENABLE_osmesa=ON' || null }}
      ${{ runner.os == 'Windows' && '-G Ninja' || null }}
      ${{ runner.os == 'macOS' && '-DCMAKE_OSX_DEPLOYMENT_TARGET=10.15' || null }}

  - name: Disable LFS during the build
    working-directory: ${{github.workspace}}
    shell: bash
    run: echo GIT_LFS_SKIP_SMUDGE=1 >> $GITHUB_ENV

  # Rerun the build as ispc can sometimes segfault on Windows
  - name: Build
    working-directory: ${{github.workspace}}/build
    shell: bash
    run: cmake --build . --config Release || cmake --build . --config Release

  # Rerun cpack as it can fail on macOS: https://github.com/actions/runner-images/issues/7522
  - name: Package
    working-directory: ${{github.workspace}}/build
    shell: bash
    run: |
      cmake ./
      ctest -R cpack --no-tests=error --output-on-failure
      ctest -R extract --no-tests=error --output-on-failure

  - name: Clean install
    working-directory: ${{github.workspace}}/build
    shell: bash
    run: cmake -E remove_directory install

  - name: Install Mesa Windows extraction
    if: runner.os == 'Windows'
    uses: f3d-app/install-mesa-windows-action@v1
    with:
      path: ${{github.workspace}}\build\Testing\test-extraction\bin

  - name: Setup Directories mesa
    if: runner.os == 'Windows'
    working-directory: ${{github.workspace}}
    shell: cmd
    run: |
      mkdir build\Testing\test-sdk\
      mkdir build\Testing\test-sdk\TestRendering_build

  - name: Install Mesa Windows test-sdk
    if: runner.os == 'Windows'
    uses: f3d-app/install-mesa-windows-action@v1
    with:
      path: ${{github.workspace}}\build\Testing\test-sdk\TestRendering_build

  # XXX: No test is not a failure here as MacOS bundle does not support SDK
  - name: Test sdk
    working-directory: ${{github.workspace}}/build
    shell: bash
    run: ctest -R sdk --output-on-failure

  # on macOS CI, texture rendering has some issues,
  # https://github.com/f3d-app/f3d/issues/792
  - name: Set CI test exception for macOS x86_64
    if: |
      runner.os == 'macOS' &&
      inputs.cpu == 'x86_64'
    shell: bash
    run: echo "F3D_CTEST_EXCEPTIONS=(TestOCCTColoring)" >> $GITHUB_ENV

  # on macOS arm64 CI, grid rendering has some issues,
  # test only some tests that do not uses grid.
  # https://github.com/f3d-app/f3d/issues/1276
  - name: Set CI test exception for macOS arm64
    if: |
      runner.os == 'macOS' &&
      inputs.cpu == 'arm64'
    shell: bash
    run: echo "F3D_CTEST_EXCEPTIONS=(TestSimple)|(TestAlembic)|(TestDraco)|(TestOCCT)|(TestOCCTColoring)|(TestUSD)|(TestVDB)" >> $GITHUB_ENV

  # on linux CI, GLX test require a Xorg server
  # Ubuntu 20.04 provided libEGL.so has rendering issues
  - name: Set CI test exception for EGL rendering on Linux
    if: runner.os == 'Linux'
    shell: bash
    run: echo "F3D_CTEST_EXCEPTIONS=(TestRenderingGLX)|(TestOCCTColoring)|(TestSimpleColor)|(TestSplat)|(TestOSPRay)" >> $GITHUB_ENV

  - name: Test executable
    working-directory: ${{github.workspace}}/build
    shell: bash
    run: ctest -R exec -E "${{ env.F3D_CTEST_EXCEPTIONS }}" --no-tests=error --output-on-failure

  - name: Run Xvfb Linux
    if: runner.os == 'Linux'
    shell: bash
    run: Xvfb $DISPLAY -screen 0 1280x1024x24 &

  - name: Test executable with Xvfb
    if: runner.os == 'Linux'
    working-directory: ${{github.workspace}}/build
    shell: bash
    run: ctest -R exec --no-tests=error --output-on-failure

  - name: Upload Tests Artifact
    if: failure()
    uses: actions/upload-artifact@v4
    with:
      path: ./build/Testing/Temporary
      name: f3d-superbuild-tests-artifact-${{runner.os}}-${{inputs.cpu}}-${{inputs.raytracing_label}}

  - name: Check sccache results
    working-directory: ${{github.workspace}}
    shell: bash
    run: sccache --show-stats

  - name: Upload Artifacts
    if: always()
    uses: actions/upload-artifact@v4
    with:
      path: ./build/F3D-*
      name: F3D-${{runner.os}}-${{inputs.cpu}}-${{inputs.raytracing_label}}
