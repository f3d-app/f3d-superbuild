name: 'F3D Python wheels'
description: 'Build and package F3D Python wheels'
inputs:
  f3d_version:
    description: 'F3D version to build'
    required: true
    default: 'master'
  use_cache:
    description: 'Whether to use superbuild cache or not'
    default: 'true'

runs:
  using: "composite"
  steps:

  # fetch-depth: 0 is required to get the tags used to determine f3d version
  # lfs: true is needed for testing, use LFS cache action instead TODO
  - name: Checkout f3d
    uses: actions/checkout@v3
    with:
      repository: 'f3d-app/f3d'
      ref: ${{inputs.f3d_version}}
      fetch-depth: 0
      path: 'f3d'
      lfs: true

  - name: Recover VTK version to build
    working-directory: ${{github.workspace}}
    shell: bash
    run: |
      echo VTK_COMMIT_SHA=`cat ./f3d/.github/actions/vtk_commit_sha` >> $GITHUB_ENV

  - name: fsbb directory
    shell: bash
    working-directory: ${{github.workspace}}
    run: mkdir fsbb

  - name: Cache fsb
    if: inputs.use_cache == 'true'
    id: cache-fsb
    uses: actions/cache@v3
    with:
      path: fsbb/install
      key: fsbb-${{runner.os}}-${{env.VTK_COMMIT_SHA}}-3

  - name: Setup Ninja Windows
    if: runner.os == 'Windows'
    shell: bash
    run: |
      choco install ninja
      echo CMAKE_GENERATOR=Ninja >> $GITHUB_ENV

  - name: Setup MSVC Windows
    if: runner.os == 'Windows'
    uses: TheMrMilchmann/setup-msvc-dev@v2.0.1
    with:
      arch: x64

  - name: Escaping backslashes Windows
    if: runner.os == 'Windows'
    shell: bash
    run: echo "ESCAPED_WS=${{github.workspace}}" | tr '\\' '/' >> $GITHUB_ENV

  - name: Download and extract Mesa Windows
    shell: cmd
    if: runner.os == 'Windows'
    working-directory: ${{github.workspace}}
    run: |
      mkdir mesa
      cd mesa
      curl.exe -L --output mesa.7z --url https://github.com/pal1000/mesa-dist-win/releases/download/22.0.1/mesa3d-22.0.1-release-msvc.7z
      "C:\Program Files\7-Zip\7z.exe" x mesa.7z

  - name: Set needed env variables
    shell: bash
    run: |
      echo "CMAKE_PREFIX_PATH=../fsbb/install" >> $GITHUB_ENV
      echo "SKBUILD_CMAKE_ARGS=-DF3D_DEPENDENCIES_DIR=${{ env.ESCAPED_WS }}/fsbb/install/bin;-DF3D_PLUGIN_BUILD_ALEMBIC=ON;-DF3D_PLUGIN_BUILD_ASSIMP=ON;-DF3D_PLUGIN_BUILD_DRACO=ON;-DF3D_PLUGIN_BUILD_OCCT=ON;-DF3D_PLUGIN_OCCT_COLORING_SUPPORT=ON;-DF3D_MODULE_EXR=ON;-DF3D_MODULE_EXTERNAL_RENDERING=ON" >> $GITHUB_ENV

  - name: Build superbuild and wheels
    if: |
      steps.cache-fsb.outputs.cache-hit != 'true' ||
      inputs.use_cache != 'true'
    uses: pypa/cibuildwheel@v2.16.2
    with:
      package-dir: ${{github.workspace}}/f3d
      output-dir: ${{github.workspace}}/wheelhouse
      config-file: ${{github.workspace}}/f3d/pyproject.toml
    env:
      # TODO: cross-compile ARM and PyPy too
      CIBW_SKIP: '*-musl* cp37-* pp*'
      CIBW_ARCHS: native
      CIBW_BUILD_VERBOSITY: 1
      CIBW_MANYLINUX_X86_64_IMAGE: ghcr.io/f3d-app/f3d-wheels-manylinux-ci
      CIBW_ENVIRONMENT_PASS_LINUX: >
        CMAKE_PREFIX_PATH
        DISPLAY
        SKBUILD_CMAKE_ARGS
        VTK_COMMIT_SHA
      CIBW_BEFORE_ALL: >
        bash ./source/.github/actions/wheels/build_f3d_superbuild.sh ${{ env.VTK_COMMIT_SHA }}
      CIBW_BEFORE_ALL_LINUX: >
        bash ./source/.github/actions/wheels/build_f3d_superbuild.sh ${{ env.VTK_COMMIT_SHA }} &&
        mkdir -p /output &&
        cp -r fsbb/install /output/fsbb_install
      CIBW_TEST_REQUIRES: pytest
      CIBW_BEFORE_TEST_LINUX: Xvfb $DISPLAY -screen 0 1280x1024x24 &
      CIBW_BEFORE_TEST_WINDOWS: bash ./source/.github/actions/wheels/copy_mesa.sh {project}
      CIBW_TEST_COMMAND: pytest -s {package}/python/testing
      CIBW_REPAIR_WHEEL_COMMAND: ''

  - name: Build wheels with cache
    if: |
      steps.cache-fsb.outputs.cache-hit == 'true' &&
      inputs.use_cache == 'true'
    uses: pypa/cibuildwheel@v2.16.2
    with:
      package-dir: ${{github.workspace}}/f3d
      output-dir: ${{github.workspace}}/wheelhouse
      config-file: ${{github.workspace}}/f3d/pyproject.toml
    env:
      CIBW_SKIP: '*-musl* cp37-* pp*'
      CIBW_ARCHS: native
      CIBW_BUILD_VERBOSITY: 1
      CIBW_MANYLINUX_X86_64_IMAGE: ghcr.io/f3d-app/f3d-wheels-manylinux-ci
      CIBW_ENVIRONMENT_PASS_LINUX: >
        CMAKE_PREFIX_PATH
        DISPLAY
        SKBUILD_CMAKE_ARGS
      CIBW_TEST_REQUIRES: pytest
      CIBW_BEFORE_TEST_LINUX: Xvfb $DISPLAY -screen 0 1280x1024x24 &
      CIBW_BEFORE_TEST_WINDOWS: bash ./source/.github/actions/wheels/copy_mesa.sh {project}
      CIBW_TEST_COMMAND: pytest -s {package}/python/testing
      CIBW_REPAIR_WHEEL_COMMAND: ''

  - name: Copy cache back
    if: |
      runner.os == 'Linux' &&
      steps.cache-fsb.outputs.cache-hit != 'true'
    shell: bash
    working-directory: ${{github.workspace}}
    run: cp -r ./wheelhouse/fsbb_install ./fsbb/install

  - uses: actions/upload-artifact@v3
    if: always()
    with:
      name: ${{ runner.os }}-wheels
      path: ./wheelhouse/f3d-*.whl
